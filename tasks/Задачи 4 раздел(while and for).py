# - 1 - Сборщик ошибок. Сборщик ошибок собирает ошибки каждый день в течение пяти дней . Напишите программу, которая
#       ведет учет нарастающего итога ошибок, собранных в течение пяти дней. Цикл должен запрашивать количество
#       ошибок, собираемых в течение каждого дня, и когда цикл завершается, программа должна вывести общее количество
#       собранных ошибок.

# Решение :
# total = 0
# for i in range(1, 6):
#     total += int(input(f'Кол-во ошибок за {i} день: '))
# print('Кол-во ошибок за 5 дней:', total)

# Решение 2:
# total = 0
# while total < 6:
#     total += int(input(f'Кол-во ошибок за {total + 1} день: '))
# print('Кол-во ошибок за 5 дней:', total)

# - 2 - Сожженные калории. Бег на беговой дорожке позволяет сжигать 4,2 калорий в минуту. Напишите программу,
#       которая применяет цикл для вывода количества калорий, сожженных после 10, 15, 20, 25 и 30 минут бега.

# Решение :
# x = 4.2
# for num in range(10, 31, 5):
#     print(f'Колличество соженых калорий после {num} минут бега составит {float(num * x)}')

# - 3 - Анализ бюджета. Напишите программу, которая просит пользователя ввести сумму, выделенную им на один месяц .
#       Затем цикл должен предложить пользователю ввести суммы отдельных статей его расходов за месяц и подсчитать
#       их нарастающим итогом. По завершению цикла программа должна вывести сэкономленную или перерасходованную
#       сумму.

# Решение :
# summ = float(input('Введите сумму на месяц: '))
# total = 0
# station = 'd'
# while station == 'd':
#    total += float(input('Введи сумму отдельной статьи: '))
#    station = input('Ввести ещё сумму ?Введите d если да: ')
# if station != 'd' and total > summ:
#     print('У вас перерасход ', total - summ, '$')
# elif station != 'd' and total < summ:
#    print('У вас экономия', summ - total, '$')

# - 4 - Пройденное расстояние. Пройденное транспортным средством расстояние можно вычислить следующим образом:
#                                   расстояние = скорость х время.
#       Например, если поезд движется со скоростью 90 км/ч в течение трех часов, то пройденное расстояние составит
#       270 км.
#       Напишите программу, которая запрашивает у пользователя скорость транспортного средства (в км/ч)
#       и количество часов, которое оно двигалось. Затем она должна применить цикл для вывода расстояния, пройденного
#       транспортным средством для каждого часа этого периода времени. Вот пример требуемого результата:

#   Какая скорость транспортного средства в км/ч?           Enter
#   Сколько часов оно двигалось?                            Enter
#   Час         Пройденное расстояние
#   1           40
#   2           80
#   3           120

# Решение 1 :
# q = 'D'
# while q == "D":
#   s = int(input('Какая скорость транспортного средства в км/ч? '))
#   h = int(input('Сколько часов оно двигалось? '))
#   d = s * h
#   print('Час\tПройденное расстояние')
#   print(int(h), '\t', int(d))
#   q = input('Ввести ещё данные ? если да , то D: ')

# Решение 2 :
# speed = int(input('Введите скорость: '))
# time = int(input('Введите время: '))
# print('Час\tДистанция')
# print('----------------')
# for i in range(1, time + 1):
#     print(i, '\t',  i * speed)

# - 5 - Средняя толщина дождевых осадков. Напишите программу, которая применяет вложенные циклы для сбора данных
#       и вычисления средней толщины дождевых осадков за ряд лет. Программа должна сначала запросить количество лет.
#       Внешний цикл будет выполнять одну итерацию для каждого года. Внутренний цикл будет делать двенадцать
#       итераций, одну для каждого месяца. Каждая итерация внутреннего цикла запрашивает у пользователя миллиметр
#       дождевых осадков в течение этого месяца. После всех итераций программа должна вывести количество месяцев,
#       общее количество миллиметров дождевых осадков и среднюю толщину дождевых осадков в месяц в течение всего
#       периода.

# Решение :

# years = int(input('Введите количество лет:  '))
# months = (
# 'январь', 'февраль', "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь")

# for num in range(years):
#    total = 0.0
#    print('\nГод', num + 1, ':')
#    print('-----------------------')

#    for test_month in range(12):
#        print('Кол-во осадков за', months[test_month], end=' ')
#        total += float(input(': '))
# average = total / (years * 12)

# print('Количество месяцев', years * 12)
# print('Осадков за этот период: ', total, 'мм')
# print('Средняя толщина осадков в месяц: ', format(average, ',.0f'), 'мм')

# - 6 - Таблица соответствия между градусами Цельсия и градусами Фаренгейта. Напишите программу, которая выводит
#       таблицу температур по шкале Цельсия от О до 20 и их эквиваленты по Фаренгейту. Формула преобразования
#       температуры из шкалы Цельсия в шкалу Фаренгейта: F = ( 9 / 5 ) * C + 32.
#       Где F - это температура по шкале Фаренгейта; С - температура по шкале Цельсия. Для
#       вывода этой таблицы ваша программа должна применить цикл.

# Решение :
# print('Фар \t Цельсия')
# print('----------------')
# for cels in range(0, 21, 1):
#    far = (9 / 5) * cels + 32
#    print(format(far, ',.1f'), '  \t ', cels)

# - 7 - Мелкая монета для зарплаты. Напишите программу, которая вычисляет сумму денег, которую человек заработает
#       в течение периода времени, если в первый день его зарплата составит одну копейку, во второй день две копейки
#       и каждый последующий день будет удваиваться. Программа должна запросить у пользователя количество дней, вывести
#       таблицу, показывающую зарплату за каждый день. Итоговый результат должен быть выведен в рублях, а не в
#       количестве копеек.

# Решение :
# work_days = int(input('Введите колличество дней: '))
# day_1 = 1
# print('Плата за первый день составит: ', day_1)
# for d in range(2, work_days + 1):
#    day_1 += day_1
#    print(f'Плат за {d} день составит {float(day_1/100)} рубля/ей')

# - 8 - Сумма чисел. Напишите программу с циклом, которая просит пользователя ввести ряд положительных чисел.
#       Пользователь должен ввести отрицательное число в качестве сигнала конца числового ряда. После того как все
#       положительные числа будут введены, программа должна вывести их сумму.

# Решение :
# total = 1
# print('Что бы получить сумму чисел введите положительное число, \nили отрицательное чтоб закончить: ')
# while True:
#    num = int(input(': '))
#    total += num
#    if num < 0:
#       print(total)
#       break


# - 9 - Уровень океана. Допустим, что уровень океана в настоящее время повышается примерно на 1,6 мм в год.
#       С учетом этого создайте приложение, которое выводит количество миллиметров, на которые океан будет подниматься
#       каждый год в течение следующих 25 лет.

# Решение :
# total = 0
# print('Year           \t+ MM')
# for i in range(1, 26, 1):
#    total += 1.6
#    print('В', i, 'год уровень =', format(total, ',.1f'))

# - 10 - Рост платы за обучение. В заданном университете обучение студента-очника составляет 45 ООО рублей в семестр.
#        Было объявлено, что плата за обучение будет повышаться на 3% каждый год в течение следующих 5 лет. Напишите
#        программу с циклом, который выводит плановую сумму за обучение в семестр в течение следующих 5 лет.

# Решение :
# semester_price = 45000.0
# increase_price = 0.03
# years_of_studying = 5
# print('Плата за первый семестр составляет', semester_price)
# for i in range(2, years_of_studying + 1):
#    semester_price += semester_price * increase_price
#    print(f'Плата за семестр {i} составляет {int(semester_price)}')

# - 11 - Потеря массы. Если умеренно активный человек будет сокращать свое потребление в калориях на 500 калорий в
#        день, то, как правило, он может похудеть примерно на 1,5 кг в месяц. Напишите программу, которая позволяет
#        пользователю ввести его исходную массу и затем создает и выводит таблицу, показывающую, каким будет его
#        ожидаемая масса в конце каждого месяца в течение следующих 6 месяцев, если он останется на этой диете.

# Решение :
# mass = int(input('Enter mass: '))
# for i in range(1, 7):
#     mass -= 1.5
#     print(f'Месяц {i}. Масса {mass}')

# - 12 - Вычисление факториала числа. В математике запись в форме n! обозначает факториал неотрицательного целого
#        числа n. Факториал n - это произведение всех неотрицательных целых чисел от 1 до n.
#        Например, 7! = 1 х 2 х 3 х 4 х 5 х 6 х 7 = 5040 и 4! = 1 х 2 х 3 х 4 = 24.
#        Напишите программу, которая позволяет пользователю ввести неотрицательное целое число и затем применяет
#        цикл для вычисления факториала этого числа и показывает факториал.

# Решение 1:
# def main():
#     n = int(input(': '))
#     total = 1
#     for i in range(1, n + 1):
#         total *= i # 1, 2, 3, 4, 5
#     print(total)
#     while True:
#         return main()
#
#
# main()

# Решение 2:
# def factorial(n):
#     if n == 0:
#         return 1
#     else:
#         return n * factorial(n - 1)
# print(factorial(5))



# - 13 - Популяция. Напишите программу, которая предсказывает приблизительный размер популяции организмов.
#        Приложение должно использовать текстовые поля, чтобы дать пользователю ввести стартовое количество организмов,
#        среднесуточное увеличение популяции (как процент) и количество дней, которые организмам будет дано на
#        размножение.
#        Например, допустим, что пользователь вводит приведенные ниже значения:
#   • стартовое количество: 2;
#   • среднесуточное увеличение: 30%;
#   • количество дней для размножения: 1О.
#        Программа должна вывести показанную ниже таблицу данных:
#   День Популяция
#   1       2
#   2       2,6
#   3       3,38
#   4       4,394
#   5       5, 7122
#   6       7,42586
#   7       9,653619
#   8       12,5497
#   9       16,31462
#   10      21,209

# Решение :
# starting_quantity = int(input('стартовое количество: '))
# average_daily_increase = float(input('среднесуточное увеличение %: '))
# number_of_days_for_breeding = int(input('количество дней для размножения: '))
# print('В первый день колличество органимов будет:', starting_quantity)
# print('День\tПопуляция')
# for i in range(1, number_of_days_for_breeding):
#    starting_quantity += starting_quantity * average_daily_increase
#    print(i, '  \t', format(starting_quantity, ',.3f'))

# - 14 - Напишите программу, которая применяет вложенные циклы для рисования этого узора:
#       *******
#       ******
#       *****
#       ****
#       ***
#       **

# Решение 1:
# for i in range(6, 0, -1):
#     for q in range(i + 1):
#         print('*', end="")
#     print()

# Решение 2:
# print('', '*'*7, '\n', '*'*6, '\n', '*'*5, '\n', '*'*4, '\n', '*'*3, '\n', '*'*2, '\n', end='', sep='')

# - 15 - Напишите программу, которая применяет вложенные циклы для рисования этого узора:
#   # #
#   #  #
#   #   #
#   #    #
#   #     #
#   #      #

# Решение :
# for x in range(1, 7):
#    print("#" + " "*x + '#')
