# - 1 - Конвертер километров. Напишите программу, которая просит пользователя ввести расстояние в километрах
#       и затем это расстояние преобразует в мили. Формула преобразования: мили = километры х 0.6214.

# Решение :
# def konvertor(kilometr, miles):
#     return kilometr * miles
#
#
# print(konvertor(float(input('Press kilometrs: ')), 0.6214))

# - 2 - Модернизация программы расчета налога с продаж. В задаче 6 по программированию из главы 2 рассматривалась
#       программа расчета налога с продаж. Требовалось написать программу, которая вычисляет и показывает региональный
#       и федеральный налоги с продаж, взимаемые при покупке. Если эта программа уже вами написана, модернизируйте ее
#       так, чтобы подзадачи были помещены в функции. Если вы ее еще не написали, то напишите с использованием функций.
#                                                   Задача 6 с раздела 2
#       Напишите программу, которая попросит пользователя ввести величину покупки. Затем программа должна вычислить
#       федеральный и региональный налог с продаж. Допустим, что федеральный налог с продаж составляет 5%, а
#       региональный - 2.5%. Программа должна показать сумму покупки, федеральный налог с продаж, региональный
#       налог с продаж, общий налог с продаж и общую сумму продажи (т. е. сумму покупки и общего налога с продаж).

# Решение:
# def nalog(buy, federal, regional):
#     return f'Сумма покупки: {buy} $\n' \
#            f'Региональный налог с продаж: {buy * regional} $\n' \
#            f'Федеральный налог с продаж: {buy * federal} $\n' \
#            f'Общий налог с продаж: {federal + regional:.3f} $\n' \
#            f'Общая сумму продажи: {buy + (buy * federal) + (buy * regional)} $'
#
#
# print(nalog(buy=int(input(': ')), federal=0.05, regional=0.025))

# - 3 - Многие финансовые эксперты рекомендуют собственникам недвижимого имущества страховать свои дома или здания
#       как минимум на 80% суммы замещения строения. Напишите программу, которая просит пользователя ввести
#       стоимость строения и затем показывает минимальную страховую сумму, на которую он
#       должен застраховать недвижимое имущество.

# Решение:
# def belay(count, insurance):
#     return count * insurance
#
#
# print(belay(count=int(input(': ')), insurance=0.8))

# - 4 - Расходы на автомобиль. Напишите программу, которая просит пользователя ввести месячные расходы на следующие
#       нужды, связанные с его автомобилем: платеж по кредиту, страховка, бензин, машинное масло, шины и
#       техобслуживание. Затем программа должна показать общую месячную стоимость и общую годовую стоимость этих
#       расходов.

# Решение 1:
# loan_payment = float(input('Введите статью расхода по кредиту: '))
# insurance = float(input('Введите статью расхода по страховке: '))
# petrol = float(input('Введите статью расхода по бенсизу: '))
# machine_oil = float(input('Введите статью расхода по маслу: '))
# tires = float(input('Введите статью расхода по шинам: '))
# maintenance = float(input('Введите статью расхода по техобслуживанию: '))
# monthly_cost = loan_payment + insurance + petrol + machine_oil + tires + maintenance
# yearly_value = monthly_cost * 12
# print('Месячные затраты на содержание = ', monthly_cost, '$',
#       '\nГодовые затраты на содержание = ', yearly_value, '$' )
# Решение 2:
# loan_payment = float(input('Введите статью расхода по кредиту: '))
# insurance = float(input('Введите статью расхода по страховке: '))
# petrol = float(input('Введите статью расхода по бенсину: '))
# machine_oil = float(input('Введите статью расхода по маслу: '))
# tires = float(input('Введите статью расхода по шинам: '))
# maintenance = float(input('Введите статью расхода по техобслуживанию: '))
# year = 12
# def monthly_cost(loan_payment, insurance, petrol, machine_oil, tires, maintenance):
#     return loan_payment + insurance + petrol + machine_oil + tires + maintenance
# def yearly_value(loan_payment, insurance, petrol, machine_oil, tires, maintenance, year):
#     return (loan_payment + insurance + petrol + machine_oil + tires + maintenance) * year
# print(monthly_cost(loan_payment, insurance, petrol, machine_oil, tires, maintenance))
# print(yearly_value(loan_payment, insurance, petrol, machine_oil, tires, maintenance, year))
# Решение 3:
# loan_payment = float(input('Введите статью расхода по кредиту: '))
# insurance = float(input('Введите статью расхода по страховке: '))
# petrol = float(input('Введите статью расхода по бенсину: '))
# machine_oil = float(input('Введите статью расхода по маслу: '))
# tires = float(input('Введите статью расхода по шинам: '))
# maintenance = float(input('Введите статью расхода по техобслуживанию: '))
# def main():
#     month = monthly_cost(loan_payment + insurance + petrol + machine_oil + tires + maintenance)
#     year = yearly_cost((loan_payment + insurance + petrol + machine_oil + tires + maintenance) * 12)
# def monthly_cost(mont):
#     print('Месячные расходы', mont, '$')
# def yearly_cost(year):
#     print('годовые расходы', year, '$',)
# main()

# - 5 - Налог на недвижимое имущество. Муниципальный округ собирает налоги на недвижимое имущество на основе оценочной
#       стоимости имущества, составляющей 60% его фактической стоимости. Например, если акр земли оценен в 1ОООО
#       долларов, то его оценочная стоимость составит 6000 долларов. В этом случае налог на имущество составит
#       72 цента за каждые 100 долларов оценочной стоимости. Налог на акр, оцененный в 6000 долларов, составит 43,20
#       доллара. Напишите программу, которая запрашивает фактическую стоимость недвижимого имущества и показывает
#       оценочную стоимость и налог на имущество.

# Решение :

# def property_tax(real_estate_value, tax_from, cents_for_dollars):
#     appraised_value = real_estate_value * tax_from
#     property_tax_value = (appraised_value / 1000) * cents_for_dollars
#     value(appraised_value, property_tax_value)
#
#
# def value(val_1, val_2):
#     print(f'Оценочная стоимость земли: {val_1}$\n'
#           f'Налог на акр составит: {val_2}$')
#
#
# property_tax(real_estate_value=float(input('Enter value: ')), tax_from=0.60, cents_for_dollars=7.2)

# - 6 - Калории за счет жиров и углеводов. Диетолог работает в спортивном клубе и дает рекомендации клиентам в
#       отношении диеты. В рамках своих рекомендаций он запрашивает у клиентов количество граммов жиров и углеводов,
#       которые они употребили за день. Затем на основе приведенной ниже формулы он вычисляет количество калорий,
#       которые получаются в результате употребления жиров:
#       калории от жиров = граммы жиров х 9.
#       Затем на основе еще одной формулы он вычисляет количество калорий, которые получаются в результате употребления
#       углеводов:
#       калории от углеводов = граммы углеводов х 4.
#       Диетолог просит вас написать программу, которая выполнит эти расчеты.

# Решение 1:
# def count_carbohydrates(carbohydrates, grams_of_carbohydrates):
#     return carbohydrates * grams_of_carbohydrates
#
#
# def count_fats(fats, grams_of_fat):
#     return fats * grams_of_fat
#
#
# def count_calories(grams_of_carbohydrates, carbohydrates, grams_of_fat, fats):
#     return f'Калорий от жиров: {count_carbohydrates(carbohydrates, grams_of_carbohydrates)}\n' \
#            f'Калорий от углеводов: {count_fats(fats, grams_of_fat)}'
#
#
# print(count_calories(grams_of_carbohydrates=4,
#                      grams_of_fat=9,
#                      carbohydrates=(float(input('Введите количество Углеводов: '))),
#                      fats=float(input('Введите количество жиров: '))))

# Решение 2:
# grams_of_fat = float(input('Введите кол-во грамм жиров которые \n'
#                            'клиент употребляет за день: '))
# grams_of_carbohydrates = float(input('Введите кол-во грамм углеводов которые\n'
#                                      'клиент употребляет за день: '))
#
#
# def calories_from_fat(grams_of_fat, num):
#     return grams_of_fat * num
#
#
# def calories_from_carbohydrates(grams_of_carbohydrates, num):
#     return grams_of_carbohydrates * num
#
#
# print('Калории от жиров - ', calories_from_fat(grams_of_fat, num=9))
# print('Калорий от углеводов - ', calories_from_carbohydrates(grams_of_carbohydrates, num=4))

# - 7 - Сидячие места на стадионе. На стадионе имеется три категории сидячих мест. Места класса А стоят 20 долларов,
#       места класса В - 15 долларов и места класса С - 1О долларов. Напишите программу, которая запрашивает, сколько
#       билетов каждого класса было продано, и затем выводит сумму дохода, полученного за счет продажи билетов.

# Решение:
# def sold_class_A(tickets_A, price):
#     return tickets_A * price
#
#
# def sold_class_B(tickets_B, price):
#     return tickets_B * price
#
#
# def sold_class_C(tickets_C, price):
#     return tickets_C * price
#
#
# print(f'Сумма дохода от билетов класса А: {sold_class_A(tickets_A=int(input(": ")), price=20)} $\n'
#       f'Сумма дохода от билетов класса B: {sold_class_B(tickets_B=int(input(": ")), price=15)} $\n'
#       f'Сумма дохода от билетов класса C: {sold_class_C(tickets_C=int(input(": ")), price=10)} $')

# - 8 - Оценщик малярных работ. Малярная компания установила, что на каждые 10 квадратных метров поверхности стены
#       требуется 5 литров краски и 8 часов работы. Компания взимает за работу 2000 руб. в час. Напишите программу,
#       которая просит пользователя ввести площадь поверхности окрашиваемой стены и цену 5-литровой емкости краски.
#   Программа должна показать следующие данные:
#       • количество требующихся емкостей краски;
#       • количество требующихся рабочих часов;
#       • стоимость краски;
#       • стоимость работы;
#       • общая стоимость малярных работ.

# Решение : НЕОБХОДИМО ОПТИМИЗИРОВАТЬ ЧЕРЕЗ ФУНКЦИЮ (я глупый...)

# wall = int(input('Введите площадь стены :'))
# price = int(input('Введите цену 5 литровой банки краски :'))
# ten_meters_sqrt_paint = 10/5
# ten_meters_sqrt_work = 8/10
# hour = 2000
# paintcount = wall/ten_meters_sqrt_paint / 5
# if paintcount > int(paintcount):
#     paintcount += 1
# print('количество требующихся емкостей краски =', int(paintcount))
# work_count = wall * ten_meters_sqrt_work
# print('количество требующихся рабочих часов =', work_count)
# paintprice = int(paintcount) * price
# print('стоимость краски =', paintprice)
# timeprice = work_count * hour
# print('стоимость работы =', timeprice)
# print('общая стоимость малярных работ =', paintprice + timeprice)


# - 9 - Месячный налог с продаж. Розничная компания должна зарегистрировать отчет о месячном налоге с продаж с
#       указанием общего налога с продаж за месяц и взимаемых сумм муниципального и федерального налогов с продаж.
#       Федеральный налог с продаж составляет 5%, муниципальный налог с продаж - 2,5%. Напишите программу, которая
#       просит пользователя ввести общий объем продаж за месяц. Из этого значения приложение должно
#       рассчитать и показать:
#   • сумму муниципального налога с продаж;
#   • сумму федерального налога с продаж;
#   • общий налог с продаж (муниципальный плюс федеральный).

# Решение:
# def main():
#     month_sales = float(input('Введите общий объем продаж за месяц: '))
#     return f'Сумма федерального налога составила: {federal_nalog(month_sales, federal=0.05)} $\n'\
#            f'Сумма муниципального налога составила: {municipal_nalog(month_sales, municipal=0.025)} $\n'\
#            f'Сумма общего налога составила: {general_nalog(month_sales, federal=0.05, municipal=0.025)} $'
#
#
# def federal_nalog(month_sales, federal):
#     return month_sales * federal
#
#
# def municipal_nalog(month_sales, municipal):
#     return month_sales * municipal
#
#
# def general_nalog(month_sales, federal, municipal):
#     return format(month_sales * (federal + municipal), ',.1f')
#
#
# print(main())

# - 10 - Футы в дюймы. Один фут равняется 12 дюймам. Напишите функцию feet_to_inches, которая в качестве аргумента
#        принимает количество футов и возвращает количество дюймов в этом количестве футов. Примените эту функцию в
#        программе, которая предлагает пользователю ввести количество футов и затем показывает количество дюймов
#        в этом количестве футов.

# Решение :
# def main():
#     foot = int(input('Введите количество футов: '))
#     num = 12.000
#     return feet_to_inches(foot, num)
#
#
# def feet_to_inches(foot, n):
#     return foot * n
#
#
# print(main())

# - 11 - Математический тест. Напишите программу, которая позволяет проводить простые математические тесты.
#        Она должна показать два случайных числа, которые должны быть просуммированы вот так:
#       247
#     + 129
#       Эта программа должна давать обучаемому возможность вводить ответ. Если ответ правильный, то должно быть
#       показано поздравительное сообщение. Если ответ неправильный, то должно быть показано сообщение с правильным
#       ответом.

# Решение 1 :
# import random
#
#
# def main():
#     answer = int(input(f'Сложите числа\n  '
#                        f'{num1}\n+ {num2}\n'
#                        f'Введите ответ'": "))
#     if answer == output(num1, num2):
#         return True
#     return False
#
#
# def output(n1, n2):
#     return n1 + n2
#
#
# num1 = random.randint(1, 10)
# num2 = random.randint(1, 10)
#
#
# print(main())

# - 12 - Напишите функцию max, которая в качестве аргументов принимает два целочисленных значения и возвращает
#        значение, которое является большим из двух. Например, если в качестве аргументов переданы 7 и 12, то функция
#        должна вернуть 12. Примените функцию в программе, которая предлагает пользователю ввести два целочисленных
#        значения. Программа должна показать большее значение из двух.

# Решение:
# def max_(a, b):
#     return a if a > b else b
#
#
# print(max_(a=7, b=12))

# - 13 - При падении тела под действием силы тяжести для определения расстояния, которое тело пролетит за
#        определенное время, применяется формула: d= 1/2gt2, где d- расстояние, м; g = 9.8, м/с2 ; t- время падения тела
#        Напишите функцию falling dtstance, которая в качестве аргумента принимает время падения тела (в секундах).
#        Функция должна вернуть расстояние в метрах, которое тело пролетело во время этого промежутка времени.
#        Напишите программу, которая вызывает эту функцию в цикле, передает значения от 1 до 1О в качестве
#        аргументов и показывает возвращаемое значение.

# Решение :

# for i in range(1, 11):
#
#     def falling_distance(t):
#         distance = 0.5 * 9.8 * t ** 2
#         return f'{distance/100:.3f}'
#     print(falling_distance(i))

# - 14 - Из физики известно, что движущееся тело имеет кинетическую
#        энергию. Приведенная ниже формула может использоваться для определения кинетической
#        энергии движущегося тела:
#        КЕ = 1/2mv2, где КЕ - это кинетическая энергия; т - масса тела, кг; v - скорость тела, м/с.
#        Напишите функцию kinetic energy, которая в качестве аргументов принимает массу тела (в килограммах)
#        и его скорость (в метрах в секунду). Данная функция должна вернуть величину кинетической энергии этого тела.
#        Напишите программу, которая просит пользователя ввести значения массы и скорости, а затем вызывает функцию
#        kinetic energy, чтобы получить кинетическую энергию тела.

# Решение :
# def main():
#     mass = float(input('Введите массу тела в килограммах: '))
#     speed = float(input('Введите скорость тела в метрах в секунду: '))
#     return f'Кинетическая энергия тела = {kinetic_energy(0.5, mass, speed, 2)}'
#
#
# def kinetic_energy(a_half, mass, speed, sqrt):
#     return a_half * mass * speed ** sqrt
#
#
# print(main())


# - 15 - Средний балл и его уровень. Напишите программу, которая просит пользователя ввести
#        пять экзаменационных оценок. Программа должна показать буквенный уровень оценки для каждой оценки и
#        средний балл. Напишите в программе приведенные ниже функции:
#   • calc average - функция должна принимать в качестве аргументов пять оценок и возвращать средний балл;
#   • determine grade - функция должна принимать в качестве аргумента оценку и возвращать
#       буквенный уровень оценки, опираясь на приведенную в табл. 5.3 классификации.
#   Таблица 5.3. Шкала классификации
#   Оценка      Уровень
#   90 и выше       А
#   80-89           B
#   70-79           C
#   60-69           D
#   Ниже 60         F

# Решение :
# def calc_average():
#     x1, x2, x3, x4, x5 = map(int, input('Введите пять оценок поочереди через пробел\n: ').split())
#     summa = (x1 + x2 + x3 + x4 + x5) / 5
#     print(summa)
#     determine_grade(summa)
#
#
# def determine_grade(summa):
#     if summa > 90:
#         grade = 'A'
#     elif 80 <= summa <= 89:
#         grade = 'B'
#     elif 70 <= summa <= 79:
#         grade = 'C'
#     elif 60 <= summa <= 69:
#         grade = 'D'
#     else:
#         grade = 'F'
#     print('Ваша оценка - ', grade)
#
#
# calc_average()


# - 16 - Счетчик четных/нечетных чисел. В этой главе вы увидели пример написания алгоритма, который определяет четность
#        или нечетность числа. Напишите программу, которая генерирует 100 случайных чисел и подсчитывает количество
#        четных и нечетных случайных чисел.

# Решение:
import random

# def random_generator(chet, nechet):
#     num = random.randint(1, 100)
#     for i in range(num):
#         if i % 2 == 0:
#             chet += 1
#         else:
#             nechet += 1
#     return f'Количество четных чисел: {chet}\n' \
#            f'Количество нечетных чисел: {nechet}'
#
#
# print(random_generator(0, 0))

# - 17 - Простое число - это число, которое делится без остатка на само себя и 1. Например, число 5 является простым,
#        потому что оно делится без остатка только на 1 и 5. Однако число 6 не является простым, потому что оно
#        делится без остатка на 1, 2, 3 и 6.
#        Напишите булеву функцию is_prime, которая в качестве аргумента принимает целое число и возвращает истину,
#        если аргумент является простым числом, либо ложь в противном случае. Примените функцию в программе, которая
#        предлагает пользователю ввести число и затем выводит сообщение с указанием, является ли это число простым.

# Решение 1:
# import math
#
#
# def is_prime(num):
#
#     for i in range(2, int(math.sqrt(num) + 1)):
#         if num % i == 0:
#             return 'Это сложное число'
#     return 'Это простое число'
#
#
# print(is_prime(num=int(input(': '))))

# Решение 2:
# num = int(input(': '))
# Flag = True
#
# for i in range(2, num):
#     if num % i == 0:
#         Flag = False
#
# if num == 1:
#     print('Это единица, она не простая и не составная')
# elif Flag == True:
#     print('Число простое')
# else:
#     print('Число составное')

# - 18 - Это упражнение предполагает, что вы уже написали функцию is prime в задаче 17. Напишите еще одну программу,
#        которая показывает все простые числа от 1 до 100. Программа должна иметь цикл,
#        который вызывает функцию is prime.

# Решение 1:

# LIST = []                   # создаем пустой список для хранения простых чисел
# for i in range(2, 101):     # пробегаем все числа от 2 до N
#     k = 0                   # в k будем хранить количество делителей
#     for j in range(1, i + 1):  # пробегаем все числа от 2 до текущего
#         if i % j == 0:          # ищем количество делителей
#             k = k + 1
#     if k == 2:              # если делителей нет, добавляем число в список
#         LIST.append(i)
# print('Простые числа:', LIST)                 # выводим на экран список

# Решение 2:
# for n in range(2, 101):
#     prime = True
#     for i in range(2, n):
#         if n % i == 0:
#             prime = False
#     if prime == True:
#         print(n)

# - 19 - Предположим, что на вашем сберегательном счете есть определенная сумма денег, и счет приносит составной
#        ежемесячный процентный доход. Вы хотите вычислить сумму, которую будете иметь после определенного количества
#        месяцев. Формула приведена ниже:
#        F = Р * ( 1 + i)**2, где F - будущая сумма на счете после указанного периода времени; Р - текущая сумма
#        на счете; i - ежемесячная процентная ставка; t - количество месяцев.
#        Напишите программу, которая предлагает пользователю ввести текущую сумму на счете, ежемесячную процентную
#        ставку и количество месяцев, в течение которых деньги будут находиться на счете. Программа должна передать
#        эти значения в функцию, которая возвращает будущую сумму на счете после заданного количества месяцев.
#        Программа должна показать будущую сумму на счете.

# Решение:
# def func(sqrt):
#     P = float(input('Enter summ: '))
#     I = int(input('Enter percent: '))
#     T = int(input('Enter month: '))
#     F = P * (1 + I) ** sqrt
#     return 'На счету будет ', F * T / 100, '$'
# print(func( sqrt=2))

# - 20 - Напишите программу, которая генерирует случайное число в диапазоне от 1 до 100 и просит пользователя угадать
#        это число. Если догадка пользователя больше случайного числа, то программа должна вывести сообщение
#       "Слишком много, попробуйте еще раз". Если догадка меньше случайного числа, то программа должна вывести
#       сообщение "Слишком мало, попробуйте еще раз". Если пользователь число угадывает, то приложение должно
#       поздравить пользователя и сгенерировать новое случайное число, чтобы возобновить игру.

# Решение:
import random


# def my_func():
#      n = random.randint(1, 100)
#      num = int(input('Введите число от 1 до 100: '))
#      count = 1
#      while num != n:
#          if num > n:
#              count += 1
#              print('Слишком много')
#
#          elif num < n:
#              count += 1
#              print('Слишком мало')
#          num = int(input('Попробуйте ещё раз '))
#      print(f'Вы угадали c {count} попытки')
#
#
# while True:
#     my_func()


# - 21 - Напишите программу, которая дает пользователю возможность поиграть с компьютером в игру
#        "Камень, ножницы, бумага". Программа должна работать следующим образом:
#   1. Когда программа запускается, генерируется случайное число в диапазоне от 1 до 3.
#       Если число равняется 1, то компьютер выбрал камень. Если число равняется 2, то компьютер выбрал ножницы.
#       Если число равняется 3, то компьютер выбрал бумагу. (Пока не показывайте выбор компьютера.)
#   2. Пользователь вводит на клавиатуре выбранный вариант "камень", "ножницы" или "бумага".
#   3. Выбор компьютера выводится на экран.
#   4. Победитель выбирается согласно следующим правилам:
#    - если один игрок выбирает камень, а другой игрок выбирает ножницы, то побеждает камень (камень разбивает ножницы);
#    - если один игрок выбирает ножницы, а другой игрок выбирает бумагу, то побеждают ножницы (ножницы режут бумагу);
#    - если один игрок выбирает бумагу, а другой игрок выбирает камень, то побеждает бумага (бумага заворачивает камень)
#    - если оба игрока делают одинаковый выбор, то для определения победителя нужно сыграть повторный раунд.

# Решение:
# import random
#
# n = random.randint(1, 3)
# if n == 1 or n == 2 or n == 3:
#     print('')
#
# entr = input('Введите камень, ножници или бумага \nчтобы сыграть с компьютером: ')
#
# if entr == 'Камень' and n == 2:
#     print('Камень разбивает ножници ! Компьютер выбрал ножници')
# elif entr == 'Камень' and n == 3:
#     print('Камень проигрывает бумаге ! Компьютер выбрал бумагу')
#
# elif entr == 'Ножници' and n == 3:
#     print('Ножници режут бумагу ! Компьютер выбрал бумагу')
# elif entr == 'Ножници' and n == 1:
#     print('Ножници проигрывают камню ! Компьютер выбрал камень')
#
# elif entr == 'Бумага' and n == 1:
#     print('Бумага заворачивает камень ! Компьютер выбрал камень')
# elif entr == 'Бумага' and n == 2:
#     print('Бумага проигрывает ножницам ! Компьютер выбрал ножници')
#
# elif entr == 'Камень' and n == 1 or entr == 'Ножници' and n == 2 or entr == 'Бумага' and n == 3:
#     print('Ничья !')


#                                               Книга Васильева
#                                                   Функции
# ----------------------------------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------------------------------- #
# def get_year():
#     year = input('Year: ')
#     if year.isdigit():
#         return year
#
#
# def get_name():
#     name = input('Name: ')
#     if name.isalpha():
#         return name
#
#
# def hello():
#     year = get_year()
#     name = get_name()
#     print(f'Hello {name} you have {year} old')
#
#
# hello()
# ----------------------------------------------------------------------------------------------------- #
import random

# def show(L, symb):
#     for s in L:
#         print(symb, s, sep='', end='')
#     print(symb)
#
#
# A = [1, 2, 3, 4, 5]
# B = {'A', 'B', 'C', 'D'}
# C = "Python"
# D = {"A": 1, "B": 2, "C": 3}
# show(A, '!')
# show(B, '/')
# show(C, '#')
# show(D, '`')
#
# print('*' * 50)
# def get_nums(n, state):
#     if type(n) != int:
#         return []
#     if state:
#         L = [2 * (k + 1) for k in range(n)]
#     else:
#         L = [2 * k + 1 for k in range(n)]
#     return L
#
#
# print(get_nums(10, True))
# print(get_nums(8, False))
# print(get_nums(12.5, True))
#
# print('*' * 50)
# def get_symbs(n):
#     if n > 10 or n < 1:
#         num = 10
#     else:
#         num = n
#     S = set()
#     Nmin = ord("A")
#     Nmax = ord("Z")
#     while len(S) < num:
#         S.add(chr(random.randint(Nmin, Nmax)))
#     return S
#
#
# print(get_symbs(7))
# print(get_symbs(-5))
# print(get_symbs(15))

# print('*' * 50)
# def shift(val):
#     print('Funk shift()')
#     print('Исходное значение:', val)
#     val = ['A', 'B', 'C']
#     print('Конечное значение:', val)
# def change(val):
#     print('Funk change()')
#     print('Исходное значение:', val)
#     if type(val) == list:
#         for k in range(len(val)):
#             val[k] += 1
#     else:
#         val += 1
#
#     print('Конечное значение:', val)
# num = 100
# L = [10, 20, 30]
# print(f'Переменная num = {num}')
# change(num)
# print(f'Переменная num = {num}')
# print(f'Список L={L}')
# shift(L)
# print(f'Список L={L}')
# change(L)
# print(f'Список L={L}')

# print('*' * 50)


# def mysum(*a):
#     txt = ['чисел', 'квадратов', 'кубов']
#
#     def calc(n):
#         s = 0
#         for i in range(len(a)):
#             s += a[i] ** n
#         return s
#     for e in range(len(txt)):
#         print(f'Сумма {txt[e]}: {calc(e + 1)}')
#
#
# mysum(1, 3, 5, 7)

# print('*' * 50)

#   ПИЗДЕЦ
# def display(f, a, b):
#     for k in range(a, b + 1):
#         print('{0:4}'.format(f(k)), end='')
#     print()
#
#
# def mypow(n):
#     return lambda x: x ** n
#
#
# def apply(f, h):
#     def calc(x):
#         return f(h(x))
#
#     return calc
#
#
# A = mypow(2)
# B = mypow(3)
# C = apply(lambda x: 2 * x + 1, lambda x: 2 * x)
# print('x ', end='')
# display(lambda x: x, 1, 5)
# print('A(x)', end='')
# display(A, 1, 5)
# print('B(x)', end='')
# display(B, 1, 5)
# print('C(x)', end='')
# display(C, 1, 5)
# F = lambda f: lambda x: f(f(x))
# print('F(x->x*x) (5): ', F(lambda x: x * x)(5))
# print('F(x->2*x+1) (5): ', F(lambda x: 2 * x + 1)(5))

# print('*' * 50)
#
#
# # Функция для вычисления суммы чисел - рекурсия
# def mysum(n):
#     if n == 0:
#         return 0
#     return n + mysum(n - 1)
#
#
# for k in range(6):
#     print(mysum(k), end=' ')
#
# print()
#
#
# # Функция для вычисления чисел Фибоначчи - рекурсия
# def fib(n):
#     if n == 1 or n == 2:
#         return 1
#     return fib(n - 1) + fib(n - 2)
#
#
# for i in range(int(input())):
#     print(fib(i + 1), end=' ')
#
# print()
#
#
# # Функция для отображения инверсного отображения текста/списка - рекурсия
# def show(txt):
#     if len(txt) == 0:
#         print('|')
#     else:
#         print('|', txt[-1], end='', sep='')
#         show(txt[:-1])
#
#
# print('Revers word')
# show('Hello World')
# print('List: ')
# show([1, 2, 3, 4, 5])


